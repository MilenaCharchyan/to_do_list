{"ast":null,"code":"var _jsxFileName = \"/Users/milenacharchyan/Desktop/list/src/pages/AddTask/index.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { addTask } from \"../../features/task/taskSlice\";\nimport { useDispatch } from \"react-redux\";\nimport * as Yup from 'yup';\nimport { useForm } from \"react-hook-form\";\n\n// export const AddTask: React.FC = React.memo((): JSX.Element => {\n//   const { register, handleSubmit, formState: { errors }, reset } = useForm<Task>();\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n\n//   const save = (data: Task) => {\n//     dispatch(addTask({ ...data, id: Date.now(), done: false }));\n//     reset();\n//     navigate('/');\n//   };\n\n//   return (\n//     <div>\n//       <h3>Add Task</h3>\n//       <form onSubmit={handleSubmit(save)}>\n//         <div className=\"inps\">\n//           <input \n//             placeholder=\"Task Name\" \n//             {...register('name', { required: 'Enter Task Name' })} \n//           />\n//           {errors.name && <p>{errors.name.message}</p>}\n\n//           <input \n//             placeholder=\"Description\" \n//             {...register('description', { required: 'Enter Description' })} \n//           />\n//           {errors.description && <p>{errors.description.message}</p>}\n\n//           <button>Add Task</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst validationSchema = Yup.object().shape({\n  name: Yup.string().required('Task name is required'),\n  description: Yup.string().max(200, 'Description must be at most 200 characters long')\n});\nexport const AddTask = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm();\n  const [errors, setErrors] = useState({});\n  const handleAddTask = data => {\n    const {\n      er\n    } = validationSchema.validateSync(data, {\n      abortEarly: false\n    });\n    if (Object.keys(validationErrors).length === 0) {\n      dispatch(addTask(data));\n      reset();\n      setErrors({});\n    } else {\n      const newErrors = {};\n      validationErrors.forEach(error => {\n        if (error.includes('name')) newErrors.name = 'Task name is required';\n        if (error.includes('description')) newErrors.description = 'Description must be at most 200 characters long';\n      });\n      setErrors(newErrors);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(handleAddTask),\n    className: \"add-task-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Task Name\",\n      ...register('name'),\n      className: \"input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this), errors.name && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error\",\n      children: errors.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Task Description\",\n      ...register('description'),\n      className: \"textarea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this), errors.description && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error\",\n      children: errors.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"add-task-btn\",\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}, \"byzhwVrMaDAvL/cqq+rAJ5Rjo+s=\", false, function () {\n  return [useDispatch, useForm];\n})), \"byzhwVrMaDAvL/cqq+rAJ5Rjo+s=\", false, function () {\n  return [useDispatch, useForm];\n});\n_c2 = AddTask;\nvar _c, _c2;\n$RefreshReg$(_c, \"AddTask$React.memo\");\n$RefreshReg$(_c2, \"AddTask\");","map":{"version":3,"names":["React","useState","addTask","useDispatch","Yup","useForm","jsxDEV","_jsxDEV","validationSchema","object","shape","name","string","required","description","max","AddTask","_s","memo","_c","dispatch","register","handleSubmit","reset","errors","setErrors","handleAddTask","data","er","validateSync","abortEarly","Object","keys","validationErrors","length","newErrors","forEach","error","includes","onSubmit","className","children","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/milenacharchyan/Desktop/list/src/pages/AddTask/index.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { addTask, selectTask } from \"../../features/task/taskSlice\";\nimport { useDispatch } from \"react-redux\";\nimport * as Yup from 'yup';\nimport { useForm } from \"react-hook-form\";\nimport { ITask } from \"../../type/type\";\n\n// export const AddTask: React.FC = React.memo((): JSX.Element => {\n//   const { register, handleSubmit, formState: { errors }, reset } = useForm<Task>();\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n\n//   const save = (data: Task) => {\n//     dispatch(addTask({ ...data, id: Date.now(), done: false }));\n//     reset();\n//     navigate('/');\n//   };\n\n//   return (\n//     <div>\n//       <h3>Add Task</h3>\n//       <form onSubmit={handleSubmit(save)}>\n//         <div className=\"inps\">\n//           <input \n//             placeholder=\"Task Name\" \n//             {...register('name', { required: 'Enter Task Name' })} \n//           />\n//           {errors.name && <p>{errors.name.message}</p>}\n          \n//           <input \n//             placeholder=\"Description\" \n//             {...register('description', { required: 'Enter Description' })} \n//           />\n//           {errors.description && <p>{errors.description.message}</p>}\n          \n//           <button>Add Task</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// });\n\ninterface FormValues {\n    name: string;\n    description: string;\n  }\n    \nconst validationSchema = Yup.object().shape({\n    name: Yup.string().required('Task name is required'),\n    description: Yup.string().max(200, 'Description must be at most 200 characters long'),\n  });\n\nexport const AddTask: React.FC = React.memo((): JSX.Element => {\n    const dispatch=useDispatch()\n    const { register, handleSubmit, reset } = useForm<ITask>();\n\n    const [errors, setErrors] = useState<{ name?: string; description?: string }>({});\n\n\n    const handleAddTask = (data: ITask) => {\n        const {er} = validationSchema.validateSync(data, { abortEarly: false });\n        \n        if (Object.keys(validationErrors).length === 0) {\n          dispatch(addTask(data));\n          reset(); \n          setErrors({}); \n        } else {\n          const newErrors: { name?: string; description?: string } = {};\n          validationErrors.forEach((error:any) => {\n            if (error.includes('name')) newErrors.name = 'Task name is required';\n            if (error.includes('description')) newErrors.description = 'Description must be at most 200 characters long';\n          });\n          setErrors(newErrors);\n        }\n      };\n    \n      return (\n        <form onSubmit={handleSubmit(handleAddTask)} className=\"add-task-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Task Name\"\n            {...register('name')}\n            className=\"input\"\n          />\n          {errors.name && <span className=\"error\">{errors.name}</span>} \n          <textarea\n            placeholder=\"Task Description\"\n            {...register('description')}\n            className=\"textarea\"\n          />\n          {errors.description && <span className=\"error\">{errors.description}</span>}\n    \n          <button type=\"submit\" className=\"add-task-btn\">Add Task</button>\n        </form>\n      );\n});"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAASC,OAAO,QAAoB,+BAA+B;AACnE,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,OAAO,QAAQ,iBAAiB;;AAGzC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,gBAAgB,GAAGJ,GAAG,CAACK,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;EACxCC,IAAI,EAAEP,GAAG,CAACQ,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,uBAAuB,CAAC;EACpDC,WAAW,EAAEV,GAAG,CAACQ,MAAM,CAAC,CAAC,CAACG,GAAG,CAAC,GAAG,EAAE,iDAAiD;AACtF,CAAC,CAAC;AAEJ,OAAO,MAAMC,OAAiB,gBAAAC,EAAA,cAAGjB,KAAK,CAACkB,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,MAAmB;EAAAA,EAAA;EAC3D,MAAMG,QAAQ,GAACjB,WAAW,CAAC,CAAC;EAC5B,MAAM;IAAEkB,QAAQ;IAAEC,YAAY;IAAEC;EAAM,CAAC,GAAGlB,OAAO,CAAQ,CAAC;EAE1D,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGxB,QAAQ,CAA0C,CAAC,CAAC,CAAC;EAGjF,MAAMyB,aAAa,GAAIC,IAAW,IAAK;IACnC,MAAM;MAACC;IAAE,CAAC,GAAGpB,gBAAgB,CAACqB,YAAY,CAACF,IAAI,EAAE;MAAEG,UAAU,EAAE;IAAM,CAAC,CAAC;IAEvE,IAAIC,MAAM,CAACC,IAAI,CAACC,gBAAgB,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;MAC9Cd,QAAQ,CAAClB,OAAO,CAACyB,IAAI,CAAC,CAAC;MACvBJ,KAAK,CAAC,CAAC;MACPE,SAAS,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,MAAM;MACL,MAAMU,SAAkD,GAAG,CAAC,CAAC;MAC7DF,gBAAgB,CAACG,OAAO,CAAEC,KAAS,IAAK;QACtC,IAAIA,KAAK,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAEH,SAAS,CAACxB,IAAI,GAAG,uBAAuB;QACpE,IAAI0B,KAAK,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAEH,SAAS,CAACrB,WAAW,GAAG,iDAAiD;MAC9G,CAAC,CAAC;MACFW,SAAS,CAACU,SAAS,CAAC;IACtB;EACF,CAAC;EAED,oBACE5B,OAAA;IAAMgC,QAAQ,EAAEjB,YAAY,CAACI,aAAa,CAAE;IAACc,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACzElC,OAAA;MACEmC,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,WAAW;MAAA,GACnBtB,QAAQ,CAAC,MAAM,CAAC;MACpBmB,SAAS,EAAC;IAAO;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC,EACDvB,MAAM,CAACb,IAAI,iBAAIJ,OAAA;MAAMiC,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEjB,MAAM,CAACb;IAAI;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC5DxC,OAAA;MACEoC,WAAW,EAAC,kBAAkB;MAAA,GAC1BtB,QAAQ,CAAC,aAAa,CAAC;MAC3BmB,SAAS,EAAC;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,EACDvB,MAAM,CAACV,WAAW,iBAAIP,OAAA;MAAMiC,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEjB,MAAM,CAACV;IAAW;MAAA8B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAE1ExC,OAAA;MAAQmC,IAAI,EAAC,QAAQ;MAACF,SAAS,EAAC,cAAc;MAAAC,QAAA,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEf,CAAC;EAAA,QA1CkB5C,WAAW,EACgBE,OAAO;AAAA,EAyCpD,CAAC;EAAA,QA1CiBF,WAAW,EACgBE,OAAO;AAAA,EAyCnD;AAAC2C,GAAA,GA3CUhC,OAAiB;AAAA,IAAAG,EAAA,EAAA6B,GAAA;AAAAC,YAAA,CAAA9B,EAAA;AAAA8B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}