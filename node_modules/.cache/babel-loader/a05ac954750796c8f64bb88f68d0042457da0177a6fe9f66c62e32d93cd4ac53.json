{"ast":null,"code":"var _jsxFileName = \"/Users/milenacharchyan/Desktop/list/src/pages/AddTask/index.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport * as Yup from 'yup';\n\n// export const AddTask: React.FC = React.memo((): JSX.Element => {\n//   const { register, handleSubmit, formState: { errors }, reset } = useForm<Task>();\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n\n//   const save = (data: Task) => {\n//     dispatch(addTask({ ...data, id: Date.now(), done: false }));\n//     reset();\n//     navigate('/');\n//   };\n\n//   return (\n//     <div>\n//       <h3>Add Task</h3>\n//       <form onSubmit={handleSubmit(save)}>\n//         <div className=\"inps\">\n//           <input \n//             placeholder=\"Task Name\" \n//             {...register('name', { required: 'Enter Task Name' })} \n//           />\n//           {errors.name && <p>{errors.name.message}</p>}\n\n//           <input \n//             placeholder=\"Description\" \n//             {...register('description', { required: 'Enter Description' })} \n//           />\n//           {errors.description && <p>{errors.description.message}</p>}\n\n//           <button>Add Task</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// });\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AddTask = /*#__PURE__*/_s(/*#__PURE__*/React.memo(_c = _s(() => {\n  _s();\n  const dispatch = useDispatch();\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required('Task name is required'),\n    description: Yup.string().max(200, 'Description must be at most 200 characters long')\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n})), \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n_c2 = AddTask;\nvar _c, _c2;\n$RefreshReg$(_c, \"AddTask$React.memo\");\n$RefreshReg$(_c2, \"AddTask\");","map":{"version":3,"names":["React","useDispatch","Yup","jsxDEV","_jsxDEV","AddTask","_s","memo","_c","dispatch","validationSchema","object","shape","name","string","required","description","max","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/milenacharchyan/Desktop/list/src/pages/AddTask/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { useAppSelector } from \"../../app/hooks\";\nimport { selectTask } from \"../../features/task/taskSlice\";\nimport { useDispatch } from \"react-redux\";\nimport * as Yup from 'yup';\n\n// export const AddTask: React.FC = React.memo((): JSX.Element => {\n//   const { register, handleSubmit, formState: { errors }, reset } = useForm<Task>();\n//   const dispatch = useDispatch();\n//   const navigate = useNavigate();\n\n//   const save = (data: Task) => {\n//     dispatch(addTask({ ...data, id: Date.now(), done: false }));\n//     reset();\n//     navigate('/');\n//   };\n\n//   return (\n//     <div>\n//       <h3>Add Task</h3>\n//       <form onSubmit={handleSubmit(save)}>\n//         <div className=\"inps\">\n//           <input \n//             placeholder=\"Task Name\" \n//             {...register('name', { required: 'Enter Task Name' })} \n//           />\n//           {errors.name && <p>{errors.name.message}</p>}\n          \n//           <input \n//             placeholder=\"Description\" \n//             {...register('description', { required: 'Enter Description' })} \n//           />\n//           {errors.description && <p>{errors.description.message}</p>}\n          \n//           <button>Add Task</button>\n//         </div>\n//       </form>\n//     </div>\n//   );\n// });\n\n\nexport const AddTask: React.FC = React.memo((): JSX.Element => {\n    const dispatch=useDispatch()\n    \n    const validationSchema = Yup.object().shape({\n        name: Yup.string().required('Task name is required'),\n        description: Yup.string().max(200, 'Description must be at most 200 characters long'),\n      });\n    return(\n        <div>\n            <h4>Add Task</h4>\n\n        </div>\n    )\n})"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAGzB,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAO,KAAKC,GAAG,MAAM,KAAK;;AAE1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,OAAO,MAAMC,OAAiB,gBAAAC,EAAA,cAAGN,KAAK,CAACO,IAAI,CAAAC,EAAA,GAAAF,EAAA,CAAC,MAAmB;EAAAA,EAAA;EAC3D,MAAMG,QAAQ,GAACR,WAAW,CAAC,CAAC;EAE5B,MAAMS,gBAAgB,GAAGR,GAAG,CAACS,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;IACxCC,IAAI,EAAEX,GAAG,CAACY,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,uBAAuB,CAAC;IACpDC,WAAW,EAAEd,GAAG,CAACY,MAAM,CAAC,CAAC,CAACG,GAAG,CAAC,GAAG,EAAE,iDAAiD;EACtF,CAAC,CAAC;EACJ,oBACIb,OAAA;IAAAc,QAAA,eACId,OAAA;MAAAc,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEhB,CAAC;AAEd,CAAC;EAAA,QAZkBrB,WAAW;AAAA,EAY7B,CAAC;EAAA,QAZiBA,WAAW;AAAA,EAY5B;AAAAsB,GAAA,GAbWlB,OAAiB;AAAA,IAAAG,EAAA,EAAAe,GAAA;AAAAC,YAAA,CAAAhB,EAAA;AAAAgB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}